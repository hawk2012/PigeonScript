module.exports = {
    translate: function(jsCode) {
        let pigeonScript = [];

        const lines = jsCode.split('\n');

        lines.forEach(line => {
            line = line.trim();

            if (!line) return;

            // --- let ---
            const letMatch = line.match(/let\s+(\w+)\s*=\s*(.+);/);
            if (letMatch) {
                const varName = letMatch[1];
                const value = letMatch[2];
                pigeonScript.push(`–¢—ã —Ä–∏—Å—É–µ—à—å —Å–ª–µ–¥ –Ω–∞ –ø–µ—Å–∫–µ ‚Äî –ø—É—Å—Ç—å –±—É–¥–µ—Ç ${varName} = ${value}.`);
                return;
            }

            // --- while ---
            const whileMatch = line.match(/while\s*$$(.+?)$$\s*\{/);
            if (whileMatch) {
                const condition = whileMatch[1];
                pigeonScript.push(`–ü–æ–∫–∞ (${condition}) ‚Äî —Ç—ã –∫—Ä—É–∂–∏—à—å—Å—è –∫–∞–∫ –±—É–¥—Ç–æ –∑–∞–±—ã–ª –∑–∞—á–µ–º –ø—Ä–∏–ª–µ—Ç–µ–ª:`);
                pigeonScript.push(' {');
                return;
            }

            // --- console.log ---
            const logMatch = line.match(/console\.log$$(.+?)$$;/);
            if (logMatch) {
                const message = logMatch[1];
                pigeonScript.push(`   –¢—ã –≤–∞–∂–Ω–æ –≤–æ—Ä–∫—É–µ—à—å: "${message}"`);
                pigeonScript.push('   –û—Å—Ç–∞–ª—å–Ω—ã–µ –ø—Ç–∏—Ü—ã –ø—Ä–∏—Å–ª—É—à–∞–ª–∏—Å—å.');
                return;
            }

            // --- x++ ---
            const incMatch = line.match(/(\w+)\+\+;/);
            if (incMatch) {
                const varName = incMatch[1];
                pigeonScript.push(`   –¢—ã –Ω–∞—Ö–æ–¥–∏—à—å –µ—â—ë –æ–¥–Ω—É –∫—Ä–æ—à–∫—É, ${varName} —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –±–æ–ª—å—à–µ.`);
                pigeonScript.push('   –ö—É—Ä–ª—ã–∫–∞–µ—à—å –æ—Ç —Ä–∞–¥–æ—Å—Ç–∏.');
                return;
            }

            // --- x-- ---
            const decMatch = line.match(/(\w+)--;/);
            if (decMatch) {
                const varName = decMatch[1];
                pigeonScript.push(`   –¢—ã –∫–ª—é—ë—à—å –æ–¥–Ω—É –∫—Ä–æ—à–∫—É, ${varName} —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è.`); 
                pigeonScript.push('   –°–æ—Å–µ–¥ –∑–∞–≤–∏–¥—É–µ—Ç.');
                return;
            }

            // --- if ---
            const ifMatch = line.match(/if\s*$$(.+?)$$\s*\{/);
            if (ifMatch) {
                const condition = ifMatch[1];
                pigeonScript.push(`–ï—Å–ª–∏ (${condition}) ‚Äî –ø—Ä–æ–≤–µ—Ä—å, —Å—Ç–æ–∏—Ç –ª–∏ —Ä–∞—Å–ø—Ä–∞–≤–∏—Ç—å –∫—Ä—ã–ª—å—è:`);
                pigeonScript.push(' {');
                return;
            }

            // --- else ---
            if (line.startsWith('else')) {
                pigeonScript.push('–ò–Ω–∞—á–µ:');
                pigeonScript.push('   –¢—ã –Ω–∞–≥–∞–¥–∏–ª –∏ —É–ª–µ—Ç–µ–ª.');
                pigeonScript.push(' {');
                return;
            }

            // --- function ---
            const funcMatch = line.match(/function\s+(\w+)\s*$$(.*?)$$\s*\{/);
            if (funcMatch) {
                const name = funcMatch[1];
                const args = funcMatch[2];
                pigeonScript.push(`–¢—ã —É–º–µ–µ—à—å "${name}(${args})", –≤–æ—Ç –∫–∞–∫ —Ç—ã —ç—Ç–æ –¥–µ–ª–∞–µ—à—å:`);
                pigeonScript.push('   –ò–Ω–æ–≥–¥–∞ —á–µ—à–µ—à—å –≥–æ–ª–æ–≤—É –∫–ª—é–≤–æ–º.');
                pigeonScript.push(' {');
                return;
            }

            // --- for ---
            const forMatch = line.match(/for\s*$$(.*?);(.*?);(.*?)$$\s*\{/);
            if (forMatch) {
                const [init, cond, step] = forMatch.slice(1);
                pigeonScript.push(`–°–¥–µ–ª–∞–π —Ä–∞–∑ –∑–∞ —Ä–∞–∑–æ–º (${init}; ${cond}; ${step}), –∫–∞–∫ –±—É–¥—Ç–æ –∏—â–µ—à—å –ª—É—á—à—É—é –∫—Ä–æ—à–∫—É:`);
                pigeonScript.push('   –í–µ—Ä—Ç–∏—Å—å, –≤–µ—Ä—Ç–∏—Å—å!');
                return;
            }

            // --- default / unknown ---
            pigeonScript.push(`// –ù–µ –ø–æ–Ω—è–ª, —á—Ç–æ –¥–µ–ª–∞—Ç—å ‚Äî –º–æ–∂–µ—Ç, –Ω–∞–∫–ª–µ–≤–∞—Ç—å—Å—è? ${line}`);
        });

        // –ö–æ–Ω—Ü–æ–≤–∫–∞ —Å –∞–ø–æ–≥–µ–µ–º –≤–æ—Ä–∫–æ–≤–∞–Ω–∏—è
        pigeonScript.push('');
        pigeonScript.push('–í—Å—ë. –¢—ã –≥–æ—Ä–¥–æ —Ä–∞—Å–ø—Ä–∞–≤–∏–ª –∫—Ä—ã–ª—å—è... –∏ –Ω–∞–≥–∞–¥–∏–ª.');
        pigeonScript.push('–≥—É—Ä –≥—É—Ä—É-–≥—É—Ä üê¶ üí©');

        return pigeonScript.join('\n');
    }
};
