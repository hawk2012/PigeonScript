const fs = require('fs');

function runPigeonScript(script) {
    const lines = script.split('\n');
    const variables = {};
    let output = [];

    function log(message) {
        output.push(`[–ì–æ–ª—É–±—å]: ${message}`);
    }

    for (let line of lines) {
        line = line.trim();

        // --- –û–±—ä—è–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ---
        const varMatch = line.match(/–ø—É—Å—Ç—å –±—É–¥–µ—Ç (\w+) = (-?\d+)/);
        if (varMatch) {
            const name = varMatch[1];
            const value = parseInt(varMatch[2]);
            variables[name] = value;
            log(`–ù–∞—à—ë–ª –∫—Ä—É–∂–æ–∫ "${name}" —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º ${value} üçû`);
            continue;
        }

        // --- –í—ã–≤–æ–¥ ---
        const sayMatch = line.match(/—Ç—ã –≤–∞–∂–Ω–æ –≤–æ—Ä–∫—É–µ—à—å: "(.+?)"/i);
        if (sayMatch) {
            const message = sayMatch[1]
                .replace(/\+ count/g, () => variables['count'])
                .replace(/\+ x/g, () => variables['x']);
            log(`üì¢ "${message}"`);
            continue;
        }

        // --- –£–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π ---
        const decMatch = line.match(/—Ç—ã –∫–ª—é—ë—à—å –æ–¥–Ω—É –∫—Ä–æ—à–∫—É, (\w+) —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è/i);
        if (decMatch && variables[decMatch[1]] !== undefined) {
            variables[decMatch[1]]--;
            log(`üìâ ${decMatch[1]} = ${variables[decMatch[1]]}`);
            continue;
        }

        // --- –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ª–æ–≤–∏—è ---
        const loopMatch = line.match(/–ø–æ–∫–∞ $$(\w+) > 0$$/i);
        if (loopMatch) {
            const varName = loopMatch[1];
            while (variables[varName] > 0) {
                // –ò–º–∏—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ç–µ–ª–∞ —Ü–∏–∫–ª–∞
                log(`üåÄ –ö—Ä—É—á—É —Ü–∏–∫–ª: ${varName} = ${variables[varName]}`);
                variables[varName]--;
            }
            continue;
        }

        // --- –ö–æ–Ω–µ—Ü –ø—Ä–æ–≥—Ä–∞–º–º—ã ---
        if (line.includes('–≥—É—Ä –≥—É—Ä—É-–≥—É—Ä')) {
            log(`üïäÔ∏è –ì–æ–ª—É–±—å —É–ª–µ—Ç–µ–ª... –Ω–æ –æ—Å—Ç–∞–≤–∏–ª –ø–æ–¥–∞—Ä–æ—á–µ–∫ üí©`);
            break;
        }

        // --- –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ ---
        if (line.length > 0 && !line.startsWith('//') && !line.startsWith('{') && !line.startsWith('}')) {
            log(`‚ùì –ù–µ –ø–æ–Ω—è–ª –∫–æ–º–∞–Ω–¥—É: "${line}"`);
        }
    }

    return output.join('\n');
}

// –ó–∞–ø—É—Å–∫ —Ñ–∞–π–ª–∞
const fileName = process.argv[2];

if (!fileName) {
    console.log("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node pigeon-interpreter.js <—Ñ–∞–π–ª>");
    process.exit(1);
}

const code = fs.readFileSync(fileName, 'utf8');
const result = runPigeonScript(code);

console.log(result);
